//REPRESENTACIÓ DE LA CLASSE PARTICIÓ. 

/*






*/



// Primera idea de la partició.
struct node{
    T _clau;
    node *_fesq;
    node *_fdret;
    node *_repre;       // Aquest pot estar lligat al pare o més endavant als avis.
    nat _numElemConjunt; // Indica el numero d'elementes que té un conjunt
    nat _altura;
};

node *_arrel;           // Farà de punter arrel.
nat _lim;               // Comptador dels elements que pot tenir com a maxim la partició. 
nat _quantsGrups;
nat _quantsElements;   // Total elements de la partició


node* find_repre(const node *p)const; 
//Pre: x és un element que pertany a un grup de la partició. 
//Post: retorna l'element representant del grup al qual pertany x.  

node* afegir(node *p, const T &x) throw(error);
//Pre: x és l'element a afegir a la partició, pn és el punter de node que recorre la partició.
//Post: Si l'element x no es trobava a la particó llavors s'afegeix. Altrament, no fa res.

static node* copia_nodes(node *m);
//Pre: Cert.
//Post: Retorna una particio amb els nodes copiats de m.

static void esborra_nodes(node *pd);
//Pre: Cert.
//Post: Elimina tots els nodes de la partició.

node* hi_es(const T &x)const throw(error);
//Pre: x és l'element a cercar a la partició, p és el punter de node que recorre la partició. 
//Post: Retorna true si l'element x es troba a la partició, altrament false. 

// Por eliminar
void print(node *p, int prof);

node* rotaDreta(node *pdreta);
//Pre:  p és un punter node ___
//Post: Gira a la dreta el subarbre arrelat amb pdreta. Retorna el nou node arrel després d'haver fet la rotació. 

node* rotaEsquerra(node *pesq);
//Pre: x és un node ___
//Post: Gira a l'esquerra el subarbre arrelat amb pesq. Retorna el nou node arrel després d'haver fet la rotació. 

int obteEquilibri(node *p);
//Pre: N és un node ___
//Post: retorna el factor de balanç del node N. 

nat altura(node *p);
//Pre: p es un node del conjunt
//Post: retorna l'altura del node p

nat maxim(nat a, nat b);
//Pre: rep dos naturals
//Post: retorna el maxim d'ambdos naturals

static node* nouNode( const T &clau);

void copia_repres(node *p, node *p2);

